// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { importCryptoKey } from './material_helpers';
import { getWebCryptoBackend } from '@aws-crypto/web-crypto-backend';
export async function importForWebCryptoEncryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for encrypt, return. */
    if (material.hasUnencryptedDataKey && material.hasCryptoKey)
        return material;
    return importCryptoKeyToMaterial(material);
}
export async function importForWebCryptoDecryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for decrypt, return. */
    if (material.hasValidKey())
        return material;
    /* Check for early return (Postcondition): If no key was able to be decrypted, return. */
    if (!material.hasUnencryptedDataKey)
        return material;
    return ((await importCryptoKeyToMaterial(material))
        /* Now that a cryptoKey has been imported, the unencrypted data key can be zeroed.
         * this is safe, because one and only one EncryptedDataKey should be used to
         * set the unencrypted data key on the material,
         * and in the browser, all crypto operations are done with a CryptoKey
         */
        .zeroUnencryptedDataKey());
}
export async function importCryptoKeyToMaterial(material) {
    const backend = await getWebCryptoBackend();
    const cryptoKey = await importCryptoKey(backend, material);
    // The trace is only set when the material does not already have
    // an hasUnencryptedDataKey.  This is an implementation detail :(
    const [trace] = material.keyringTrace;
    return material.setCryptoKey(cryptoKey, trace);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cmluZ19oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2tleXJpbmdfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBUXRDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUVwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVwRSxNQUFNLENBQUMsS0FBSyxVQUFVLG9DQUFvQyxDQUN4RCxRQUFxQztJQUVyQywyR0FBMkc7SUFDM0csSUFBSSxRQUFRLENBQUMscUJBQXFCLElBQUksUUFBUSxDQUFDLFlBQVk7UUFBRSxPQUFPLFFBQVEsQ0FBQTtJQUU1RSxPQUFPLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLG9DQUFvQyxDQUN4RCxRQUFxQztJQUVyQywyR0FBMkc7SUFDM0csSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO1FBQUUsT0FBTyxRQUFRLENBQUE7SUFDM0MseUZBQXlGO0lBQ3pGLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCO1FBQUUsT0FBTyxRQUFRLENBQUE7SUFFcEQsT0FBTyxDQUNMLENBQUMsTUFBTSx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6Qzs7OztXQUlHO1NBQ0Ysc0JBQXNCLEVBQUUsQ0FDNUIsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHlCQUF5QixDQUM3QyxRQUFXO0lBRVgsTUFBTSxPQUFPLEdBQUcsTUFBTSxtQkFBbUIsRUFBRSxDQUFBO0lBQzNDLE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUMxRCxnRUFBZ0U7SUFDaEUsaUVBQWlFO0lBQ2pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFBO0lBQ3JDLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDaEQsQ0FBQyJ9