"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.importCryptoKeyToMaterial = exports.importForWebCryptoDecryptionMaterial = exports.importForWebCryptoEncryptionMaterial = void 0;
const material_helpers_1 = require("./material_helpers");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
async function importForWebCryptoEncryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for encrypt, return. */
    if (material.hasUnencryptedDataKey && material.hasCryptoKey)
        return material;
    return importCryptoKeyToMaterial(material);
}
exports.importForWebCryptoEncryptionMaterial = importForWebCryptoEncryptionMaterial;
async function importForWebCryptoDecryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for decrypt, return. */
    if (material.hasValidKey())
        return material;
    /* Check for early return (Postcondition): If no key was able to be decrypted, return. */
    if (!material.hasUnencryptedDataKey)
        return material;
    return ((await importCryptoKeyToMaterial(material))
        /* Now that a cryptoKey has been imported, the unencrypted data key can be zeroed.
         * this is safe, because one and only one EncryptedDataKey should be used to
         * set the unencrypted data key on the material,
         * and in the browser, all crypto operations are done with a CryptoKey
         */
        .zeroUnencryptedDataKey());
}
exports.importForWebCryptoDecryptionMaterial = importForWebCryptoDecryptionMaterial;
async function importCryptoKeyToMaterial(material) {
    const backend = await (0, web_crypto_backend_1.getWebCryptoBackend)();
    const cryptoKey = await (0, material_helpers_1.importCryptoKey)(backend, material);
    // The trace is only set when the material does not already have
    // an hasUnencryptedDataKey.  This is an implementation detail :(
    const [trace] = material.keyringTrace;
    return material.setCryptoKey(cryptoKey, trace);
}
exports.importCryptoKeyToMaterial = importCryptoKeyToMaterial;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cmluZ19oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2tleXJpbmdfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBUXRDLHlEQUFvRDtBQUVwRCx1RUFBb0U7QUFFN0QsS0FBSyxVQUFVLG9DQUFvQyxDQUN4RCxRQUFxQztJQUVyQywyR0FBMkc7SUFDM0csSUFBSSxRQUFRLENBQUMscUJBQXFCLElBQUksUUFBUSxDQUFDLFlBQVk7UUFBRSxPQUFPLFFBQVEsQ0FBQTtJQUU1RSxPQUFPLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFQRCxvRkFPQztBQUVNLEtBQUssVUFBVSxvQ0FBb0MsQ0FDeEQsUUFBcUM7SUFFckMsMkdBQTJHO0lBQzNHLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtRQUFFLE9BQU8sUUFBUSxDQUFBO0lBQzNDLHlGQUF5RjtJQUN6RixJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFxQjtRQUFFLE9BQU8sUUFBUSxDQUFBO0lBRXBELE9BQU8sQ0FDTCxDQUFDLE1BQU0seUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekM7Ozs7V0FJRztTQUNGLHNCQUFzQixFQUFFLENBQzVCLENBQUE7QUFDSCxDQUFDO0FBakJELG9GQWlCQztBQUVNLEtBQUssVUFBVSx5QkFBeUIsQ0FDN0MsUUFBVztJQUVYLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBQSx3Q0FBbUIsR0FBRSxDQUFBO0lBQzNDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBQSxrQ0FBZSxFQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUMxRCxnRUFBZ0U7SUFDaEUsaUVBQWlFO0lBQ2pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFBO0lBQ3JDLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDaEQsQ0FBQztBQVRELDhEQVNDIn0=