import { WebCryptoMaterialsManager, EncryptionRequest, DecryptionRequest, EncryptionContext, WebCryptoAlgorithmSuite, WebCryptoEncryptionMaterial, WebCryptoDecryptionMaterial, KeyringWebCrypto, GetEncryptionMaterials, GetDecryptMaterials } from '@aws-crypto/material-management';
export declare type WebCryptoEncryptionRequest = EncryptionRequest<WebCryptoAlgorithmSuite>;
export declare type WebCryptoDecryptionRequest = DecryptionRequest<WebCryptoAlgorithmSuite>;
export declare type WebCryptoGetEncryptionMaterials = GetEncryptionMaterials<WebCryptoAlgorithmSuite>;
export declare type WebCryptoGetDecryptMaterials = GetDecryptMaterials<WebCryptoAlgorithmSuite>;
/**
 * The WebCryptoDefaultCryptographicMaterialsManager is a specific implementation of the CryptographicMaterialsManager.
 * New cryptography materials managers SHOULD extend from WebCryptoMaterialsManager.
 * Users should never need to create an instance of a WebCryptoDefaultCryptographicMaterialsManager.
 */
export declare class WebCryptoDefaultCryptographicMaterialsManager implements WebCryptoMaterialsManager {
    readonly keyring: KeyringWebCrypto;
    constructor(keyring: KeyringWebCrypto);
    getEncryptionMaterials({ suite, encryptionContext, commitmentPolicy, }: WebCryptoEncryptionRequest): Promise<WebCryptoEncryptionMaterial>;
    decryptMaterials({ suite, encryptedDataKeys, encryptionContext, }: WebCryptoDecryptionRequest): Promise<WebCryptoDecryptionMaterial>;
    _initializeEncryptionMaterial(suite: WebCryptoAlgorithmSuite, encryptionContext: EncryptionContext): Promise<WebCryptoEncryptionMaterial>;
    _initializeDecryptionMaterial(suite: WebCryptoAlgorithmSuite, encryptionContext: EncryptionContext): Promise<WebCryptoDecryptionMaterial>;
}
//# sourceMappingURL=browser_cryptographic_materials_manager.d.ts.map