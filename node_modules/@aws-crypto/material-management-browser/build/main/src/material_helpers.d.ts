import { WebCryptoEncryptionMaterial, WebCryptoDecryptionMaterial, AwsEsdkJsCryptoKey, WebCryptoMaterial, SupportedAlgorithmSuites } from '@aws-crypto/material-management';
import { WebCryptoBackend } from '@aws-crypto/web-crypto-backend';
export interface GetSubtleEncrypt {
    (iv: Uint8Array, additionalData: Uint8Array): (data: Uint8Array) => Promise<ArrayBuffer>;
}
interface EncryptInfo {
    getSubtleEncrypt: GetSubtleEncrypt;
    keyCommitment?: Uint8Array;
}
export interface GetEncryptInfo {
    (messageId: Uint8Array): Promise<EncryptInfo>;
}
export interface SubtleSign {
    (data: Uint8Array): PromiseLike<ArrayBuffer>;
}
export interface WebCryptoEncryptionMaterialHelper {
    getEncryptInfo: GetEncryptInfo;
    subtleSign?: SubtleSign;
    dispose: () => void;
}
export interface GetEncryptHelper {
    (material: WebCryptoEncryptionMaterial): Promise<WebCryptoEncryptionMaterialHelper>;
}
export declare const getEncryptHelper: GetEncryptHelper;
export interface GetSubtleDecrypt extends GetSubtleEncrypt {
}
export interface GetDecryptInfo {
    (messageId: Uint8Array, commitKey?: Uint8Array): Promise<GetSubtleDecrypt>;
}
interface SubtleVerify {
    (signature: Uint8Array, data: Uint8Array): PromiseLike<boolean>;
}
export interface WebCryptoDecryptionMaterialHelper {
    getDecryptInfo: GetDecryptInfo;
    subtleVerify?: SubtleVerify;
    dispose: () => void;
}
export interface GetDecryptionHelper {
    (material: WebCryptoDecryptionMaterial): Promise<WebCryptoDecryptionMaterialHelper>;
}
export declare const getDecryptionHelper: GetDecryptionHelper;
declare type SubtleFunctionName = 'encrypt' | 'decrypt';
declare type PickSubtleReturn<T extends SubtleFunctionName> = T extends 'encrypt' ? {
    getSubtleEncrypt: GetSubtleEncrypt;
    keyCommitment?: Uint8Array;
} : GetSubtleDecrypt;
export declare function currySubtleFunction<Material extends WebCryptoMaterial<Material>, Name extends SubtleFunctionName>(material: Material, backend: WebCryptoBackend, subtleFunctionName: Name): (messageId: Uint8Array, commitKey?: Uint8Array | undefined) => Promise<PickSubtleReturn<Name>>;
export declare function WebCryptoKdf<T extends WebCryptoMaterial<T>>(subtle: SubtleCrypto, material: T, cryptoKey: AwsEsdkJsCryptoKey, keyUsages: SubtleFunctionName[], nonce: Uint8Array, commitKey?: Uint8Array): Promise<{
    deriveKey: AwsEsdkJsCryptoKey;
    keyCommitment?: Uint8Array;
}>;
export declare function buildAlgorithmForKDF(suite: SupportedAlgorithmSuites, nonce: Uint8Array): {
    name: "HKDF";
    hash: {
        name: import("@aws-crypto/material-management").NodeHash | import("@aws-crypto/material-management").WebCryptoHash;
    };
    info: Uint8Array;
    salt: Uint8Array;
};
export declare function deriveKeyCommitment<T extends WebCryptoMaterial<T>>(subtle: SubtleCrypto, material: T, cryptoKey: AwsEsdkJsCryptoKey, nonce: Uint8Array, commitKey?: Uint8Array): Promise<Uint8Array | undefined>;
export declare function importCryptoKey<T extends WebCryptoMaterial<T>>(backend: WebCryptoBackend, material: T, keyUsages?: KeyUsage[]): Promise<AwsEsdkJsCryptoKey | {
    nonZeroByteCryptoKey: AwsEsdkJsCryptoKey;
    zeroByteCryptoKey: AwsEsdkJsCryptoKey;
}>;
export declare function _importCryptoKey<T extends WebCryptoMaterial<T>>(subtle: SubtleCrypto, material: T, keyUsages?: KeyUsage[]): Promise<AwsEsdkJsCryptoKey>;
export {};
//# sourceMappingURL=material_helpers.d.ts.map