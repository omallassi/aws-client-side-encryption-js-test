"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebCryptoCachingMaterialsManager = void 0;
const cache_material_1 = require("@aws-crypto/cache-material");
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
const util_base64_browser_1 = require("@aws-sdk/util-base64-browser");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const sha512_1 = require("./sha512");
const cacheKeyHelpers = (0, cache_material_1.buildCryptographicMaterialsCacheKeyHelpers)(util_utf8_browser_1.fromUtf8, util_utf8_browser_1.toUtf8, sha512_1.sha512);
class WebCryptoCachingMaterialsManager {
    constructor(input) {
        const backingMaterialsManager = input.backingMaterials instanceof material_management_browser_1.KeyringWebCrypto
            ? new material_management_browser_1.WebCryptoDefaultCryptographicMaterialsManager(input.backingMaterials)
            : input.backingMaterials;
        /* Precondition: A partition value must exist for WebCryptoCachingMaterialsManager.
         * The maximum hash function at this time is 512.
         * So I create 64 bytes of random data.
         */
        const { partition = (0, util_base64_browser_1.toBase64)((0, web_crypto_backend_1.synchronousRandomValues)(64)) } = input;
        (0, cache_material_1.decorateProperties)(this, {
            ...input,
            backingMaterialsManager,
            partition,
        });
    }
    getEncryptionMaterials = (0, cache_material_1.getEncryptionMaterials)(cacheKeyHelpers);
    decryptMaterials = (0, cache_material_1.decryptMaterials)(cacheKeyHelpers);
    _cacheEntryHasExceededLimits = (0, cache_material_1.cacheEntryHasExceededLimits)();
}
exports.WebCryptoCachingMaterialsManager = WebCryptoCachingMaterialsManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19tYXRlcmlhbHNfbWFuYWdlcl9icm93c2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhY2hpbmdfbWF0ZXJpYWxzX21hbmFnZXJfYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDLCtEQVNtQztBQUNuQyx5RkFPZ0Q7QUFDaEQsa0VBQTZEO0FBQzdELHNFQUF1RDtBQUN2RCx1RUFBd0U7QUFDeEUscUNBQWlDO0FBRWpDLE1BQU0sZUFBZSxHQUFHLElBQUEsMkRBQTBDLEVBQ2hFLDRCQUFRLEVBQ1IsMEJBQU0sRUFDTixlQUFNLENBQ1AsQ0FBQTtBQUVELE1BQWEsZ0NBQWdDO0lBVTNDLFlBQVksS0FBNEQ7UUFDdEUsTUFBTSx1QkFBdUIsR0FDM0IsS0FBSyxDQUFDLGdCQUFnQixZQUFZLDhDQUFnQjtZQUNoRCxDQUFDLENBQUMsSUFBSSwyRUFBNkMsQ0FDL0MsS0FBSyxDQUFDLGdCQUFnQixDQUN2QjtZQUNILENBQUMsQ0FBRSxLQUFLLENBQUMsZ0JBQWtFLENBQUE7UUFFL0U7OztXQUdHO1FBQ0gsTUFBTSxFQUFFLFNBQVMsR0FBRyxJQUFBLDhCQUFRLEVBQUMsSUFBQSw0Q0FBdUIsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRW5FLElBQUEsbUNBQWtCLEVBQUMsSUFBSSxFQUFFO1lBQ3ZCLEdBQUcsS0FBSztZQUNSLHVCQUF1QjtZQUN2QixTQUFTO1NBQ1YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELHNCQUFzQixHQUNwQixJQUFBLHVDQUFzQixFQUEwQixlQUFlLENBQUMsQ0FBQTtJQUNsRSxnQkFBZ0IsR0FDZCxJQUFBLGlDQUFnQixFQUEwQixlQUFlLENBQUMsQ0FBQTtJQUM1RCw0QkFBNEIsR0FDMUIsSUFBQSw0Q0FBMkIsR0FBMkIsQ0FBQTtDQUN6RDtBQXJDRCw0RUFxQ0MifQ==