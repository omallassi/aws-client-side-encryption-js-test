// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { decorateProperties, getEncryptionMaterials, decryptMaterials, cacheEntryHasExceededLimits, buildCryptographicMaterialsCacheKeyHelpers, } from '@aws-crypto/cache-material';
import { WebCryptoDefaultCryptographicMaterialsManager, KeyringWebCrypto, } from '@aws-crypto/material-management-browser';
import { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-browser';
import { toBase64 } from '@aws-sdk/util-base64-browser';
import { synchronousRandomValues } from '@aws-crypto/web-crypto-backend';
import { sha512 } from './sha512';
const cacheKeyHelpers = buildCryptographicMaterialsCacheKeyHelpers(fromUtf8, toUtf8, sha512);
export class WebCryptoCachingMaterialsManager {
    constructor(input) {
        const backingMaterialsManager = input.backingMaterials instanceof KeyringWebCrypto
            ? new WebCryptoDefaultCryptographicMaterialsManager(input.backingMaterials)
            : input.backingMaterials;
        /* Precondition: A partition value must exist for WebCryptoCachingMaterialsManager.
         * The maximum hash function at this time is 512.
         * So I create 64 bytes of random data.
         */
        const { partition = toBase64(synchronousRandomValues(64)) } = input;
        decorateProperties(this, {
            ...input,
            backingMaterialsManager,
            partition,
        });
    }
    getEncryptionMaterials = getEncryptionMaterials(cacheKeyHelpers);
    decryptMaterials = decryptMaterials(cacheKeyHelpers);
    _cacheEntryHasExceededLimits = cacheEntryHasExceededLimits();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19tYXRlcmlhbHNfbWFuYWdlcl9icm93c2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhY2hpbmdfbWF0ZXJpYWxzX21hbmFnZXJfYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE9BQU8sRUFFTCxrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUNoQiwyQkFBMkIsRUFDM0IsMENBQTBDLEdBRzNDLE1BQU0sNEJBQTRCLENBQUE7QUFDbkMsT0FBTyxFQUVMLDZDQUE2QyxFQUU3QyxnQkFBZ0IsR0FHakIsTUFBTSx5Q0FBeUMsQ0FBQTtBQUNoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRWpDLE1BQU0sZUFBZSxHQUFHLDBDQUEwQyxDQUNoRSxRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sQ0FDUCxDQUFBO0FBRUQsTUFBTSxPQUFPLGdDQUFnQztJQVUzQyxZQUFZLEtBQTREO1FBQ3RFLE1BQU0sdUJBQXVCLEdBQzNCLEtBQUssQ0FBQyxnQkFBZ0IsWUFBWSxnQkFBZ0I7WUFDaEQsQ0FBQyxDQUFDLElBQUksNkNBQTZDLENBQy9DLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDdkI7WUFDSCxDQUFDLENBQUUsS0FBSyxDQUFDLGdCQUFrRSxDQUFBO1FBRS9FOzs7V0FHRztRQUNILE1BQU0sRUFBRSxTQUFTLEdBQUcsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFFbkUsa0JBQWtCLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEdBQUcsS0FBSztZQUNSLHVCQUF1QjtZQUN2QixTQUFTO1NBQ1YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELHNCQUFzQixHQUNwQixzQkFBc0IsQ0FBMEIsZUFBZSxDQUFDLENBQUE7SUFDbEUsZ0JBQWdCLEdBQ2QsZ0JBQWdCLENBQTBCLGVBQWUsQ0FBQyxDQUFBO0lBQzVELDRCQUE0QixHQUMxQiwyQkFBMkIsRUFBMkIsQ0FBQTtDQUN6RCJ9