// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { RsaPadding, JsonWebKeyRsaAlg, RsaHash, } from './types';
import { needs, isCryptoKey, } from '@aws-crypto/material-management-browser';
const OAEP_SHA1_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-1' },
};
Object.freeze(OAEP_SHA1_MFG1);
Object.freeze(OAEP_SHA1_MFG1.hash);
const OAEP_SHA256_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-256' },
};
Object.freeze(OAEP_SHA256_MFG1);
Object.freeze(OAEP_SHA256_MFG1.hash);
const OAEP_SHA384_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-384' },
};
Object.freeze(OAEP_SHA384_MFG1);
Object.freeze(OAEP_SHA384_MFG1.hash);
const OAEP_SHA512_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-512' },
};
Object.freeze(OAEP_SHA512_MFG1);
Object.freeze(OAEP_SHA512_MFG1.hash);
const JsonWebKeyMap = Object.freeze({
    [JsonWebKeyRsaAlg['RSA-OAEP']]: OAEP_SHA1_MFG1,
    [JsonWebKeyRsaAlg['RSA-OAEP-256']]: OAEP_SHA256_MFG1,
    [JsonWebKeyRsaAlg['RSA-OAEP-384']]: OAEP_SHA384_MFG1,
    [JsonWebKeyRsaAlg['RSA-OAEP-512']]: OAEP_SHA512_MFG1,
});
const RsaPaddingMap = Object.freeze({
    [RsaPadding.OAEP_SHA1_MFG1]: OAEP_SHA1_MFG1,
    [RsaPadding.OAEP_SHA256_MFG1]: OAEP_SHA256_MFG1,
    [RsaPadding.OAEP_SHA384_MFG1]: OAEP_SHA384_MFG1,
    [RsaPadding.OAEP_SHA512_MFG1]: OAEP_SHA512_MFG1,
});
export function getImportOptions(keyInfo) {
    const { alg } = keyInfo;
    const { padding } = keyInfo;
    if (JsonWebKeyMap[alg]) {
        return {
            format: 'jwk',
            key: keyInfo,
            wrappingAlgorithm: JsonWebKeyMap[alg],
        };
    }
    else if (RsaPaddingMap[padding]) {
        const { format, key } = keyInfo;
        return {
            format,
            key,
            wrappingAlgorithm: RsaPaddingMap[padding],
        };
    }
    throw new Error('Unsupported RsaImportableKey');
}
export function getWrappingAlgorithm(publicKey, privateKey) {
    const privateKeys = flattenMixedCryptoKey(privateKey);
    if (publicKey && privateKeys.length) {
        return verify(...[publicKey, ...privateKeys].map(extract));
    }
    else if (publicKey) {
        return verify(extract(publicKey));
    }
    else if (privateKeys.length) {
        return verify(...privateKeys.map(extract));
    }
    throw new Error('No Key provided.');
}
export function extract(key) {
    const { algorithm } = key;
    // @ts-ignore
    const { name, hash } = algorithm;
    return { name: name, hash };
}
export function verify(...args) {
    const [wrappingAlgorithm, ...rest] = args;
    /* Precondition: Need at least 1 algorithm to verify. */
    needs(wrappingAlgorithm, 'Can not verify an empty set of algorithms.');
    const { name, hash } = wrappingAlgorithm;
    /* Precondition: The wrappingAlgorithm name must be a supported value. */
    needs(JsonWebKeyRsaAlg[name], 'Algorithm name is not supported.');
    /* Precondition: The hash name must be a supported value. */
    needs(hash && RsaHash[hash.name], 'Hash name is not supported.');
    /* Check for early return (Postcondition): Only 1 wrappingAlgorithm is clearly valid. */
    if (!rest.length)
        return wrappingAlgorithm;
    /* Precondition: All keys must have the same wrappingAlgorithm. */
    needs(rest.every(equalWrappingAlgorithm), 'Not all RSA keys have the same wrappingAlgorithm.');
    return wrappingAlgorithm;
    function equalWrappingAlgorithm(algorithm) {
        return (algorithm.name === name &&
            algorithm.hash &&
            algorithm.hash.name === hash.name);
    }
}
export function flattenMixedCryptoKey(key) {
    /* Check for early return (Postcondition): empty inputs should return an empty array. */
    if (!key)
        return [];
    if (isCryptoKey(key))
        return [key];
    const { nonZeroByteCryptoKey, zeroByteCryptoKey } = key;
    const keys = [nonZeroByteCryptoKey, zeroByteCryptoKey];
    /* Postcondition: Not all keys are CryptoKeys. */
    needs(keys.every(isCryptoKey), 'Not all keys are CryptoKeys.');
    return keys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2ltcG9ydF9vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dldF9pbXBvcnRfb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE9BQU8sRUFDTCxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLE9BQU8sR0FLUixNQUFNLFNBQVMsQ0FBQTtBQUNoQixPQUFPLEVBRUwsS0FBSyxFQUNMLFdBQVcsR0FFWixNQUFNLHlDQUF5QyxDQUFBO0FBR2hELE1BQU0sY0FBYyxHQUE0QjtJQUM5QyxJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0NBQ3hCLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBRWxDLE1BQU0sZ0JBQWdCLEdBQTRCO0lBQ2hELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Q0FDMUIsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBRXBDLE1BQU0sZ0JBQWdCLEdBQTRCO0lBQ2hELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Q0FDMUIsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBRXBDLE1BQU0sZ0JBQWdCLEdBQTRCO0lBQ2hELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUks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