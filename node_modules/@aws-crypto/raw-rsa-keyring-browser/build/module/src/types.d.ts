import { MixedBackendCryptoKey, AwsEsdkJsCryptoKey } from '@aws-crypto/material-management-browser';
export declare enum RsaPadding {
    OAEP_SHA1_MFG1 = "OAEP_SHA1_MFG1",
    OAEP_SHA256_MFG1 = "OAEP_SHA256_MFG1",
    OAEP_SHA384_MFG1 = "OAEP_SHA384_MFG1",
    OAEP_SHA512_MFG1 = "OAEP_SHA512_MFG1"
}
export declare enum Format {
    raw = "raw",
    pkcs8 = "pkcs8",
    spki = "spki"
}
export declare enum JsonWebKeyRsaAlg {
    'RSA-OAEP' = "RSA-OAEP",
    'RSA-OAEP-256' = "RSA-OAEP-256",
    'RSA-OAEP-384' = "RSA-OAEP-384",
    'RSA-OAEP-512' = "RSA-OAEP-512"
}
export declare enum RsaHash {
    'SHA-1' = "SHA-1",
    'SHA-256' = "SHA-256",
    'SHA-384' = "SHA-384",
    'SHA-512' = "SHA-512"
}
export declare type RsaWrappingKeyHash = Readonly<{
    name: keyof typeof RsaHash;
}>;
export declare type RsaWrappingKeyAlgorithm = Readonly<{
    name: keyof typeof JsonWebKeyRsaAlg;
    hash: Readonly<RsaWrappingKeyHash>;
}>;
export interface BinaryKey {
    format: Format | keyof typeof Format;
    key: Uint8Array;
    padding: RsaPadding | keyof typeof RsaPadding;
}
export interface RsaJsonWebKey extends JsonWebKey {
    alg: keyof typeof JsonWebKeyRsaAlg;
}
export declare type RsaImportableKey = RsaJsonWebKey | BinaryKey;
export declare type RawRsaKeyringWebCryptoInput = {
    keyNamespace: string;
    keyName: string;
    privateKey?: AwsEsdkJsCryptoKey | MixedBackendCryptoKey;
    publicKey?: AwsEsdkJsCryptoKey;
};
//# sourceMappingURL=types.d.ts.map