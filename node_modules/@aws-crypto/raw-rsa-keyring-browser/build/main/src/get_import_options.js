"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenMixedCryptoKey = exports.verify = exports.extract = exports.getWrappingAlgorithm = exports.getImportOptions = void 0;
const types_1 = require("./types");
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const OAEP_SHA1_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-1' },
};
Object.freeze(OAEP_SHA1_MFG1);
Object.freeze(OAEP_SHA1_MFG1.hash);
const OAEP_SHA256_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-256' },
};
Object.freeze(OAEP_SHA256_MFG1);
Object.freeze(OAEP_SHA256_MFG1.hash);
const OAEP_SHA384_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-384' },
};
Object.freeze(OAEP_SHA384_MFG1);
Object.freeze(OAEP_SHA384_MFG1.hash);
const OAEP_SHA512_MFG1 = {
    name: 'RSA-OAEP',
    hash: { name: 'SHA-512' },
};
Object.freeze(OAEP_SHA512_MFG1);
Object.freeze(OAEP_SHA512_MFG1.hash);
const JsonWebKeyMap = Object.freeze({
    [types_1.JsonWebKeyRsaAlg['RSA-OAEP']]: OAEP_SHA1_MFG1,
    [types_1.JsonWebKeyRsaAlg['RSA-OAEP-256']]: OAEP_SHA256_MFG1,
    [types_1.JsonWebKeyRsaAlg['RSA-OAEP-384']]: OAEP_SHA384_MFG1,
    [types_1.JsonWebKeyRsaAlg['RSA-OAEP-512']]: OAEP_SHA512_MFG1,
});
const RsaPaddingMap = Object.freeze({
    [types_1.RsaPadding.OAEP_SHA1_MFG1]: OAEP_SHA1_MFG1,
    [types_1.RsaPadding.OAEP_SHA256_MFG1]: OAEP_SHA256_MFG1,
    [types_1.RsaPadding.OAEP_SHA384_MFG1]: OAEP_SHA384_MFG1,
    [types_1.RsaPadding.OAEP_SHA512_MFG1]: OAEP_SHA512_MFG1,
});
function getImportOptions(keyInfo) {
    const { alg } = keyInfo;
    const { padding } = keyInfo;
    if (JsonWebKeyMap[alg]) {
        return {
            format: 'jwk',
            key: keyInfo,
            wrappingAlgorithm: JsonWebKeyMap[alg],
        };
    }
    else if (RsaPaddingMap[padding]) {
        const { format, key } = keyInfo;
        return {
            format,
            key,
            wrappingAlgorithm: RsaPaddingMap[padding],
        };
    }
    throw new Error('Unsupported RsaImportableKey');
}
exports.getImportOptions = getImportOptions;
function getWrappingAlgorithm(publicKey, privateKey) {
    const privateKeys = flattenMixedCryptoKey(privateKey);
    if (publicKey && privateKeys.length) {
        return verify(...[publicKey, ...privateKeys].map(extract));
    }
    else if (publicKey) {
        return verify(extract(publicKey));
    }
    else if (privateKeys.length) {
        return verify(...privateKeys.map(extract));
    }
    throw new Error('No Key provided.');
}
exports.getWrappingAlgorithm = getWrappingAlgorithm;
function extract(key) {
    const { algorithm } = key;
    // @ts-ignore
    const { name, hash } = algorithm;
    return { name: name, hash };
}
exports.extract = extract;
function verify(...args) {
    const [wrappingAlgorithm, ...rest] = args;
    /* Precondition: Need at least 1 algorithm to verify. */
    (0, material_management_browser_1.needs)(wrappingAlgorithm, 'Can not verify an empty set of algorithms.');
    const { name, hash } = wrappingAlgorithm;
    /* Precondition: The wrappingAlgorithm name must be a supported value. */
    (0, material_management_browser_1.needs)(types_1.JsonWebKeyRsaAlg[name], 'Algorithm name is not supported.');
    /* Precondition: The hash name must be a supported value. */
    (0, material_management_browser_1.needs)(hash && types_1.RsaHash[hash.name], 'Hash name is not supported.');
    /* Check for early return (Postcondition): Only 1 wrappingAlgorithm is clearly valid. */
    if (!rest.length)
        return wrappingAlgorithm;
    /* Precondition: All keys must have the same wrappingAlgorithm. */
    (0, material_management_browser_1.needs)(rest.every(equalWrappingAlgorithm), 'Not all RSA keys have the same wrappingAlgorithm.');
    return wrappingAlgorithm;
    function equalWrappingAlgorithm(algorithm) {
        return (algorithm.name === name &&
            algorithm.hash &&
            algorithm.hash.name === hash.name);
    }
}
exports.verify = verify;
function flattenMixedCryptoKey(key) {
    /* Check for early return (Postcondition): empty inputs should return an empty array. */
    if (!key)
        return [];
    if ((0, material_management_browser_1.isCryptoKey)(key))
        return [key];
    const { nonZeroByteCryptoKey, zeroByteCryptoKey } = key;
    const keys = [nonZeroByteCryptoKey, zeroByteCryptoKey];
    /* Postcondition: Not all keys are CryptoKeys. */
    (0, material_management_browser_1.needs)(keys.every(material_management_browser_1.isCryptoKey), 'Not all keys are CryptoKeys.');
    return keys;
}
exports.flattenMixedCryptoKey = flattenMixedCryptoKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2ltcG9ydF9vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dldF9pbXBvcnRfb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDLG1DQVFnQjtBQUNoQix5RkFLZ0Q7QUFHaEQsTUFBTSxjQUFjLEdBQTRCO0lBQzlDLElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7Q0FDeEIsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFbEMsTUFBTSxnQkFBZ0IsR0FBNEI7SUFDaEQsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtDQUMxQixDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFcEMsTUFBTSxnQkFBZ0IsR0FBNEI7SUFDaEQsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtDQUMxQixDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFcEMsTUFBTSxnQkFBZ0IsR0FBNEI7SUFDaEQsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtDQUMxQixDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQy9C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