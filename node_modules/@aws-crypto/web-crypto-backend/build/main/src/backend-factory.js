"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFullSupportWebCryptoBackend = exports.pluckSubtleCrypto = exports.windowRequiresFallback = exports.getZeroByteSubtle = exports.getNonZeroByteBackend = exports.webCryptoBackendFactory = void 0;
const ie11_detection_1 = require("@aws-crypto/ie11-detection");
const supports_web_crypto_1 = require("@aws-crypto/supports-web-crypto");
const synchronous_random_values_1 = require("./synchronous_random_values");
const promisify_ms_crypto_1 = __importDefault(require("./promisify-ms-crypto"));
function webCryptoBackendFactory(window) {
    const fallbackRequiredPromise = windowRequiresFallback(window);
    const randomValues = (0, synchronous_random_values_1.generateSynchronousRandomValues)(window);
    let webCryptoFallbackPromise = false;
    return { getWebCryptoBackend, configureFallback };
    async function getWebCryptoBackend() {
        /* Precondition: Access to a secure random source is required. */
        try {
            randomValues(1);
        }
        catch (ex) {
            throw new Error('No supported secure random');
        }
        const fallbackRequired = await fallbackRequiredPromise;
        const subtle = pluckSubtleCrypto(window);
        const webCryptoFallback = await webCryptoFallbackPromise;
        /* Postcondition: If a a subtle backend exists and a fallback is required, one must be configured.
         * In this case the subtle backend does not support zero byte GCM operations.
         */
        if (subtle && fallbackRequired && !webCryptoFallback) {
            throw new Error('A Fallback is required for zero byte AES-GCM operations.');
        }
        /* Postcondition: If no SubtleCrypto exists, a fallback must configured. */
        if (!subtle && !webCryptoFallback) {
            throw new Error('A Fallback is required because no subtle backend exists.');
        }
        if (!fallbackRequired && subtle) {
            return { subtle, randomValues };
        }
        if (fallbackRequired && subtle && webCryptoFallback) {
            return {
                nonZeroByteSubtle: subtle,
                randomValues,
                zeroByteSubtle: webCryptoFallback,
            };
        }
        if (fallbackRequired && !subtle && webCryptoFallback) {
            return { subtle: webCryptoFallback, randomValues };
        }
        throw new Error('unknown error');
    }
    async function configureFallback(fallback) {
        const fallbackRequired = await fallbackRequiredPromise;
        /* Precondition: If a fallback is not required, do not configure one. */
        if (!fallbackRequired) {
            return;
        }
        /* Precondition: Can not reconfigure fallback. */
        if (webCryptoFallbackPromise)
            throw new Error('Fallback reconfiguration denied');
        /* Precondition: Fallback must look like it supports the required operations. */
        if (!(0, supports_web_crypto_1.supportsSubtleCrypto)(fallback))
            throw new Error('Fallback does not support WebCrypto');
        // This if to lock the fallback.
        // when using the fallback, it is simpler
        // for the customer to not await the success
        // of configuration so we handle it for them
        // I still return in case they want to await
        webCryptoFallbackPromise = (0, supports_web_crypto_1.supportsZeroByteGCM)(fallback).then((zeroByteGCMSupport) => {
            /* Postcondition: The fallback must specifically support ZeroByteGCM. */
            if (!zeroByteGCMSupport)
                throw new Error('Fallback does not support zero byte AES-GCM');
            return fallback;
        });
        return webCryptoFallbackPromise;
    }
}
exports.webCryptoBackendFactory = webCryptoBackendFactory;
function getNonZeroByteBackend(backend) {
    /* Precondition: A backend must be passed to get a non zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return (backend.subtle ||
        backend.nonZeroByteSubtle);
}
exports.getNonZeroByteBackend = getNonZeroByteBackend;
function getZeroByteSubtle(backend) {
    /* Precondition: A backend must be passed to get a zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return (backend.subtle ||
        backend.zeroByteSubtle);
}
exports.getZeroByteSubtle = getZeroByteSubtle;
async function windowRequiresFallback(window) {
    const subtle = pluckSubtleCrypto(window);
    if (!subtle)
        return true;
    const zeroByteSupport = await (0, supports_web_crypto_1.supportsZeroByteGCM)(subtle);
    return !zeroByteSupport;
}
exports.windowRequiresFallback = windowRequiresFallback;
function pluckSubtleCrypto(window) {
    // if needed webkitSubtle check should be added here
    // see: https://webkit.org/blog/7790/update-on-web-cryptography/
    if ((0, supports_web_crypto_1.supportsWebCrypto)(window))
        return window.crypto.subtle;
    if ((0, ie11_detection_1.isMsWindow)(window))
        return (0, promisify_ms_crypto_1.default)(window.msCrypto.subtle);
    return false;
}
exports.pluckSubtleCrypto = pluckSubtleCrypto;
function isFullSupportWebCryptoBackend(backend) {
    return !!backend.subtle;
}
exports.isFullSupportWebCryptoBackend = isFullSupportWebCryptoBackend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JhY2tlbmQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7Ozs7O0FBRXRDLCtEQUF1RDtBQUN2RCx5RUFJd0M7QUFDeEMsMkVBQTZFO0FBQzdFLGdGQUEyRDtBQWdCM0QsU0FBZ0IsdUJBQXVCLENBQUMsTUFBYztJQUNwRCxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlELE1BQU0sWUFBWSxHQUFHLElBQUEsMkRBQStCLEVBQUMsTUFBTSxDQUFDLENBQUE7SUFDNUQsSUFBSSx3QkFBd0IsR0FBa0MsS0FBSyxDQUFBO0lBRW5FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSxDQUFBO0lBRWpELEtBQUssVUFBVSxtQkFBbUI7UUFDaEMsaUVBQWlFO1FBQ2pFLElBQUk7WUFDRixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDaEI7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUM5QztRQUVELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQTtRQUN0RCxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN4QyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sd0JBQXdCLENBQUE7UUFFeEQ7O1dBRUc7UUFDSCxJQUFJLE1BQU0sSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3BELE1BQU0sSUFBSSxLQUFLLENBQ2IsMERBQTBELENBQzNELENBQUE7U0FDRjtRQUVELDJFQUEyRTtRQUMzRSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FDYiwwREFBMEQsQ0FD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