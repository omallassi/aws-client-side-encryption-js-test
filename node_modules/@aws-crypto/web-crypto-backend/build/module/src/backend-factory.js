// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { isMsWindow } from '@aws-crypto/ie11-detection';
import { supportsWebCrypto, supportsSubtleCrypto, supportsZeroByteGCM, } from '@aws-crypto/supports-web-crypto';
import { generateSynchronousRandomValues } from './synchronous_random_values';
import promisifyMsSubtleCrypto from './promisify-ms-crypto';
export function webCryptoBackendFactory(window) {
    const fallbackRequiredPromise = windowRequiresFallback(window);
    const randomValues = generateSynchronousRandomValues(window);
    let webCryptoFallbackPromise = false;
    return { getWebCryptoBackend, configureFallback };
    async function getWebCryptoBackend() {
        /* Precondition: Access to a secure random source is required. */
        try {
            randomValues(1);
        }
        catch (ex) {
            throw new Error('No supported secure random');
        }
        const fallbackRequired = await fallbackRequiredPromise;
        const subtle = pluckSubtleCrypto(window);
        const webCryptoFallback = await webCryptoFallbackPromise;
        /* Postcondition: If a a subtle backend exists and a fallback is required, one must be configured.
         * In this case the subtle backend does not support zero byte GCM operations.
         */
        if (subtle && fallbackRequired && !webCryptoFallback) {
            throw new Error('A Fallback is required for zero byte AES-GCM operations.');
        }
        /* Postcondition: If no SubtleCrypto exists, a fallback must configured. */
        if (!subtle && !webCryptoFallback) {
            throw new Error('A Fallback is required because no subtle backend exists.');
        }
        if (!fallbackRequired && subtle) {
            return { subtle, randomValues };
        }
        if (fallbackRequired && subtle && webCryptoFallback) {
            return {
                nonZeroByteSubtle: subtle,
                randomValues,
                zeroByteSubtle: webCryptoFallback,
            };
        }
        if (fallbackRequired && !subtle && webCryptoFallback) {
            return { subtle: webCryptoFallback, randomValues };
        }
        throw new Error('unknown error');
    }
    async function configureFallback(fallback) {
        const fallbackRequired = await fallbackRequiredPromise;
        /* Precondition: If a fallback is not required, do not configure one. */
        if (!fallbackRequired) {
            return;
        }
        /* Precondition: Can not reconfigure fallback. */
        if (webCryptoFallbackPromise)
            throw new Error('Fallback reconfiguration denied');
        /* Precondition: Fallback must look like it supports the required operations. */
        if (!supportsSubtleCrypto(fallback))
            throw new Error('Fallback does not support WebCrypto');
        // This if to lock the fallback.
        // when using the fallback, it is simpler
        // for the customer to not await the success
        // of configuration so we handle it for them
        // I still return in case they want to await
        webCryptoFallbackPromise = supportsZeroByteGCM(fallback).then((zeroByteGCMSupport) => {
            /* Postcondition: The fallback must specifically support ZeroByteGCM. */
            if (!zeroByteGCMSupport)
                throw new Error('Fallback does not support zero byte AES-GCM');
            return fallback;
        });
        return webCryptoFallbackPromise;
    }
}
export function getNonZeroByteBackend(backend) {
    /* Precondition: A backend must be passed to get a non zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return (backend.subtle ||
        backend.nonZeroByteSubtle);
}
export function getZeroByteSubtle(backend) {
    /* Precondition: A backend must be passed to get a zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return (backend.subtle ||
        backend.zeroByteSubtle);
}
export async function windowRequiresFallback(window) {
    const subtle = pluckSubtleCrypto(window);
    if (!subtle)
        return true;
    const zeroByteSupport = await supportsZeroByteGCM(subtle);
    return !zeroByteSupport;
}
export function pluckSubtleCrypto(window) {
    // if needed webkitSubtle check should be added here
    // see: https://webkit.org/blog/7790/update-on-web-cryptography/
    if (supportsWebCrypto(window))
        return window.crypto.subtle;
    if (isMsWindow(window))
        return promisifyMsSubtleCrypto(window.msCrypto.subtle);
    return false;
}
export function isFullSupportWebCryptoBackend(backend) {
    return !!backend.subtle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JhY2tlbmQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN2RCxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLG9CQUFvQixFQUNwQixtQkFBbUIsR0FDcEIsTUFBTSxpQ0FBaUMsQ0FBQTtBQUN4QyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUM3RSxPQUFPLHVCQUF1QixNQUFNLHVCQUF1QixDQUFBO0FBZ0IzRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBYztJQUNwRCxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlELE1BQU0sWUFBWSxHQUFHLCtCQUErQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzVELElBQUksd0JBQXdCLEdBQWtDLEtBQUssQ0FBQTtJQUVuRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQTtJQUVqRCxLQUFLLFVBQVUsbUJBQW1CO1FBQ2hDLGlFQUFpRTtRQUNqRSxJQUFJO1lBQ0YsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ2hCO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7U0FDOUM7UUFFRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sdUJBQXVCLENBQUE7UUFDdEQsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHdCQUF3QixDQUFBO1FBRXhEOztXQUVHO1FBQ0gsSUFBSSxNQUFNLElBQUksZ0JBQWdCLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNw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