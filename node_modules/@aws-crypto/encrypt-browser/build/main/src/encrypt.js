"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports._encrypt = void 0;
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const serialize_1 = require("@aws-crypto/serialize");
const util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const serialize = (0, serialize_1.serializeFactory)(util_utf8_browser_1.fromUtf8);
const { messageAADContentString, messageAAD } = (0, serialize_1.aadFactory)(util_utf8_browser_1.fromUtf8);
async function _encrypt({ commitmentPolicy, maxEncryptedDataKeys }, cmm, plaintext, { suiteId, encryptionContext = {}, frameLength = serialize_1.FRAME_LENGTH, } = {}) {
    /* Precondition: _encrypt needs a valid commitmentPolicy. */
    (0, material_management_browser_1.needs)(material_management_browser_1.CommitmentPolicy[commitmentPolicy], 'Invalid commitment policy.');
    // buildEncrypt defaults this to false for backwards compatibility, so this is satisfied
    /* Precondition: _encrypt needs a valid maxEncryptedDataKeys. */
    (0, material_management_browser_1.needs)(maxEncryptedDataKeys === false || maxEncryptedDataKeys >= 1, 'Invalid maxEncryptedDataKeys value.');
    /* Precondition: The frameLength must be less than the maximum frame size for browser encryption. */
    (0, material_management_browser_1.needs)(frameLength > 0 && serialize_1.Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${serialize_1.Maximum.FRAME_SIZE}`);
    const backend = await (0, web_crypto_backend_1.getWebCryptoBackend)();
    if (!backend)
        throw new Error('No supported crypto backend');
    /* If the cmm is a Keyring, wrap it with WebCryptoDefaultCryptographicMaterialsManager. */
    cmm =
        cmm instanceof material_management_browser_1.KeyringWebCrypto
            ? new material_management_browser_1.WebCryptoDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    // Subtle Crypto functions are all one-shot so all the plaintext needs to be available.
    const plaintextLength = plaintext.byteLength;
    const suite = suiteId && new material_management_browser_1.WebCryptoAlgorithmSuite(suiteId);
    /* Precondition: Only request WebCryptoEncryptionMaterial for algorithm suites supported in commitmentPolicy. */
    material_management_browser_1.CommitmentPolicySuites.isEncryptEnabled(commitmentPolicy, suite);
    const encryptionRequest = {
        suite,
        encryptionContext,
        plaintextLength,
        commitmentPolicy,
    };
    const material = await cmm.getEncryptionMaterials(encryptionRequest);
    /* Precondition: Only use WebCryptoEncryptionMaterial for algorithm suites supported in commitmentPolicy. */
    material_management_browser_1.CommitmentPolicySuites.isEncryptEnabled(commitmentPolicy, material.suite);
    /* Precondition: _encrypt encryption materials must not exceed maxEncryptedDataKeys */
    (0, material_management_browser_1.needs)(maxEncryptedDataKeys === false ||
        material.encryptedDataKeys.length <= maxEncryptedDataKeys, 'maxEncryptedDataKeys exceeded.');
    const { getEncryptInfo, subtleSign, dispose } = await (0, material_management_browser_1.getEncryptHelper)(material);
    const versionString = material_management_browser_1.MessageFormat[material.suite.messageFormat];
    const messageIdLength = parseInt(serialize_1.MessageIdLength[versionString], 10);
    /* Precondition UNTESTED: WebCrypto suites must result is some messageIdLength. */
    (0, material_management_browser_1.needs)(messageIdLength > 0, 'Algorithm suite has unknown message format.');
    const messageId = await backend.randomValues(messageIdLength);
    const { ivLength } = material.suite;
    const { getSubtleEncrypt, keyCommitment } = await getEncryptInfo(messageId);
    const messageHeader = serialize.buildMessageHeader({
        suite: material.suite,
        encryptedDataKeys: material.encryptedDataKeys,
        encryptionContext: material.encryptionContext,
        messageId,
        frameLength,
        suiteData: keyCommitment,
    });
    const header = serialize.serializeMessageHeader(messageHeader);
    const headerIv = serialize.headerAuthIv(ivLength);
    const headerAuthTag = new Uint8Array(await getSubtleEncrypt(headerIv, header)(new Uint8Array(0)));
    // In the case of plaintextLength == 0 there still needs to be 1 frame.
    const numberOfFrames = Math.max(Math.ceil(plaintextLength / frameLength), 1);
    /* The final frame has a variable length.
     * The value needs to be known, but should only be calculated once.
     * So I calculate how much of a frame I should have at the end.
     * This value will NEVER be larger than the frameLength.
     */
    const finalFrameLength = plaintextLength - (numberOfFrames - 1) * frameLength;
    const bodyContent = [];
    for (let sequenceNumber = 1; numberOfFrames >= sequenceNumber; sequenceNumber += 1) {
        const frameIv = serialize.frameIv(ivLength, sequenceNumber);
        const isFinalFrame = sequenceNumber === numberOfFrames;
        const frameHeader = isFinalFrame
            ? serialize.finalFrameHeader(sequenceNumber, frameIv, finalFrameLength)
            : serialize.frameHeader(sequenceNumber, frameIv);
        const contentString = messageAADContentString({
            contentType: messageHeader.contentType,
            isFinalFrame,
        });
        const messageAdditionalData = messageAAD(messageId, contentString, sequenceNumber, isFinalFrame ? finalFrameLength : frameLength);
        /* Slicing an ArrayBuffer in a browser is suboptimal.
         * It makes a copy.s
         * So I just make a new view for the length of the frame.
         */
        const framePlaintext = new Uint8Array(plaintext.buffer, (sequenceNumber - 1) * frameLength, isFinalFrame ? finalFrameLength : frameLength);
        const cipherBufferAndAuthTag = await getSubtleEncrypt(frameIv, messageAdditionalData)(framePlaintext);
        bodyContent.push(frameHeader, cipherBufferAndAuthTag);
    }
    const result = (0, serialize_1.concatBuffers)(header, (0, serialize_1.serializeMessageHeaderAuth)({
        headerIv,
        headerAuthTag,
        messageHeader,
    }), ...bodyContent);
    dispose();
    if (typeof subtleSign === 'function') {
        const signatureArrayBuffer = await subtleSign(result);
        const derSignature = (0, serialize_1.raw2der)(new Uint8Array(signatureArrayBuffer), material.suite);
        const signatureInfo = (0, serialize_1.serializeSignatureInfo)(derSignature);
        return { result: (0, serialize_1.concatBuffers)(result, signatureInfo), messageHeader };
    }
    else {
        return { result: result, messageHeader };
    }
}
exports._encrypt = _encrypt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7QUFFdEMseUZBY2dEO0FBQ2hELHFEQVc4QjtBQUM5QixrRUFBcUQ7QUFDckQsdUVBQW9FO0FBRXBFLE1BQU0sU0FBUyxHQUFHLElBQUEsNEJBQWdCLEVBQUMsNEJBQVEsQ0FBQyxDQUFBO0FBQzVDLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFBLHNCQUFVLEVBQUMsNEJBQVEsQ0FBQyxDQUFBO0FBYzdELEtBQUssVUFBVSxRQUFRLENBQzVCLEVBQUUsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQWlCLEVBQ3pELEdBQWlELEVBQ2pELFNBQXFCLEVBQ3JCLEVBQ0UsT0FBTyxFQUNQLGlCQUFpQixHQUFHLEVBQUUsRUFDdEIsV0FBVyxHQUFHLHdCQUFZLE1BQ1YsRUFBRTtJQUVwQiw0REFBNEQ7SUFDNUQsSUFBQSxtQ0FBSyxFQUFDLDhDQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUV2RSx3RkFBd0Y7SUFDeEYsZ0VBQWdFO0lBQ2hFLElBQUEsbUNBQUssRUFDSCxvQkFBb0IsS0FBSyxLQUFLLElBQUksb0JBQW9CLElBQUksQ0FBQyxFQUMzRCxxQ0FBcUMsQ0FDdEMsQ0FBQTtJQUVELG9HQUFvRztJQUNwRyxJQUFBLG1DQUFLLEVBQ0gsV0FBVyxHQUFHLENBQUMsSUFBSSxtQkFBTyxDQUFDLFVBQVUsSUFBSSxXQUFXLEVBQ3BELGlEQUFpRCxtQkFBTyxDQUFDLFVBQVUsRUFBRSxDQUN0RSxDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLHdDQUFtQixHQUFFLENBQUE7SUFDM0MsSUFBSSxDQUFDLE9BQU87UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUE7SUFF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